Day1:


command prompt:
subst : fake a drive to put project root

win32_handmade.cpp : main file 
WinMain msdn

.bat file to build program
PATH: to find cl.exe
vcvarsall.bat to set up environments variables

modify shortcut to run our shell setup scripts

/handmade/code
/handmade/misc


Day2: Opening win32 window

WNDCLASS
  try declare one and inspect with debugger before/after it initialize
  .style, .lpfnProc, hInstanc, lpszCLassName


Device context: classDC, ownDC

Messages:
WM_SIZE, WM_DESTROY, WM_CLOSE, WM_ACTIVATEAPP

OutputDebugStringA()

RegisterClass()
CreateWindow()
HandleMessage()


WM_PAINT BeginPaint, EndPaint, DC

Day4: Draw in back buffer

- Don't need to store BitMapHandle, DeviceContext anymore
- Virtuall alloc to alloc memory for the drawing buffer using biWidth, biHeight, biPlanes, biBitCount
- StretchDIBits: Don't use X, Y, Width, Height, Use WindowWidth, and BUfferWidth, etc. 
- TopDown bitmap in BitmapInfo
- RGB byte order
- RenderWeirdRectangle()
- PeekMessage


Day 5: XInput
Make common function: Get Window dimension
xinput.h
xinputgetstate
LoadxInput dynamically  
  - define x_input_get_state function pointer
  - define x_input_set_state function pointer
Create XInputGetStateStub
-LoadLibrary, GetProcAddress
-vk_keyup, vk_keydown, vk_syskeyup, vksyskeydown
- Virtual Key Code Lising, WasDown




Day 7: DirectSound Initialization

- Compiler flag to get full path of error, turn of warning
- On Frame n, we try to output graphics and sound for frame n + 1
- 48khz, 2sec
- Win32InitDSound() only valid after we have window
  - Load Library
  - Get Direct sound object
  - Create primary buffer: memory for direct sound
  - Create secondary buffer: memory for us to write to
- DirectSoundCreate 
- SetCoorperativeLevel: We want sound output format as same as our input
- CreateSoundBuffer
- BufferSize, SamplePerSecond, 16 bit audio
- SetFormat on primary buffer

Day 8: Writing a sound wave

- DirectSound is COM (verify)
- Msdn DirectSound buffer for documentation: 
- Lock SecondaryBuffer, considering two region: lock near end (2 regions), lock near b eginning (1 region)
- Need to get the play cursor and write cursor: GetCurrentCursorPosition
- Infinitive Running Index, then wrap to secondary buffer size,
- Play
- Unlock


Day 9: Sine wave

- Modify to output sine wave
- How to debug bug in sound output: Fill buffer only once and never do that again,
- Latency sample count: How far we want to fill out sound buffer, not entirely the available space, so we
can get more quick change in sound if we change the input,
- Kick off the buffer (to fix the bugs????)


Day 10: Frequency counter

- Intel architecture reference manualal
- RTDSC instruction
- QueryPerformanceCounter
- CPU clocks can change, try to check if posibble to lock them
- Variable name: TimeElapsed, MsPerFrame


Day 11: Basic of API design

- Unity build: one conceptutal translation unit for entire project: "If I'm on window, win32_handmade.cpp
is the only one file built, if onlinux, linux_handmade.cpp is the only one file built"
- Virtual platform API: For game it is a bit hard because different operating system has different to set
up device. For example:
  SetupAudio()
  SetupWindow()
 
 These calls will depend on operating system, maybe audio need a window first. As a game, it should not 
 care about the order
- handmade.h
- GameUpdateAndRender() replace RenderWeirdGradient()


Date 13: Platform independent input
- Move offsetx, offsety, tonehz to game local_persist
- Digital button: Half transition count, button ended down, becasue we poll 1 time / frame -> half transitoin
count maximum value is 1
- Buttons : gamepad A, gamepad B, gamepad x, gamepad y, left shoulder, right shoulder
- Swap old controllers, min, max, swap macro todo
- IsAnalog: separate offset movement to accept analog input and digital input



Day 14: Platform independent memory
- Normally has a game start up which we allocate game state, then later delete game state when game exit
- More allocations introduce more failure point duing program, maybe get forgotten
- struct game_memory
- Separate game memory into segments: One hold permanent data during game runtime which need to be persist between
frame to frame, one is scratch memory which can be throw away if not need
- struct game_state: first segment
- Got rid of local_persist in game
- Macros for megabytes, gigabytes, kilobytes 
- Only after succesfully allocate memory, game is allowed to run
- We need fixed location for Permanent storage

- Assertion Function
- BUild.bat debug build

- Passing timing info to game: game_clock into input

