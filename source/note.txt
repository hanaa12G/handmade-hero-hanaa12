Day1:


command prompt:
subst : fake a drive to put project root

win32_handmade.cpp : main file 
WinMain msdn

.bat file to build program
PATH: to find cl.exe
vcvarsall.bat to set up environments variables

modify shortcut to run our shell setup scripts

/handmade/code
/handmade/misc


Day2: Opening win32 window

WNDCLASS
  try declare one and inspect with debugger before/after it initialize
  .style, .lpfnProc, hInstanc, lpszCLassName


Device context: classDC, ownDC

Messages:
WM_SIZE, WM_DESTROY, WM_CLOSE, WM_ACTIVATEAPP

OutputDebugStringA()

RegisterClass()
CreateWindow()
HandleMessage()


WM_PAINT BeginPaint, EndPaint, DC

Day4: Draw in back buffer

- Don't need to store BitMapHandle, DeviceContext anymore
- Virtuall alloc to alloc memory for the drawing buffer using biWidth, biHeight, biPlanes, biBitCount
- StretchDIBits: Don't use X, Y, Width, Height, Use WindowWidth, and BUfferWidth, etc. 
- TopDown bitmap in BitmapInfo
- RGB byte order
- RenderWeirdRectangle()
- PeekMessage


Day 5: XInput
Make common function: Get Window dimension
xinput.h
xinputgetstate
LoadxInput dynamically  
  - define x_input_get_state function pointer
  - define x_input_set_state function pointer
Create XInputGetStateStub
-LoadLibrary, GetProcAddress
-vk_keyup, vk_keydown, vk_syskeyup, vksyskeydown
- Virtual Key Code Lising, WasDown




Day 7: DirectSound Initialization

- Compiler flag to get full path of error, turn of warning
- On Frame n, we try to output graphics and sound for frame n + 1
- 48khz, 2sec
- Win32InitDSound() only valid after we have window
  - Load Library
  - Get Direct sound object
  - Create primary buffer: memory for direct sound
  - Create secondary buffer: memory for us to write to
- DirectSoundCreate 
- SetCoorperativeLevel: We want sound output format as same as our input
- CreateSoundBuffer
- BufferSize, SamplePerSecond, 16 bit audio
- SetFormat on primary buffer

Day 8: Writing a sound wave

- DirectSound is COM (verify)
- Msdn DirectSound buffer for documentation: 
- Lock SecondaryBuffer, considering two region: lock near end (2 regions), lock near beginning (1 region)
- Need to get the play cursor and write cursor: GetCurrentCursorPosition
- Infinitive Running Index, then wrap to secondary buffer size,
- Play
- Unlock
